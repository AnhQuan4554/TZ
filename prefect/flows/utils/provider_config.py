# generated by datamodel-codegen:
#   filename:  spec.yaml.tpl
#   timestamp: 2022-09-30T01:42:28+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Optional

from pydantic import BaseModel, Field


class Model(BaseModel):
    __root__: Any


class Headers(BaseModel):
    Authorization: Optional[str] = None
    Content_Type: Optional[str] = Field(None, alias='Content-Type')
    Accept: Optional[str] = None
    apiKey: Optional[str] = None


class Variable(BaseModel):
    name: str
    value: str


class Environment(BaseModel):
    variable: Optional[Variable] = None


class Password(BaseModel):
    username: Optional[str] = None
    password: Optional[str] = None


class Authentication(BaseModel):
    password: Optional[Password] = None


class Source(BaseModel):
    path: Optional[str] = None
    authentication: Optional[Authentication] = None
    querystring: Optional[dict[str, Any]] = None
    headers: Optional[Headers] = None


class Data(BaseModel):
    query: Optional[str] = None
    glob: Optional[str] = None
    format: Optional[str] = None


class ObjectStorageType(Enum):
    s3 = 's3'
    gcs = 'gcs'
    azure = 'azure'


class ObjectStorage(BaseModel):
    type: Optional[ObjectStorageType] = None
    presignedUrl: Optional[str] = None


class Client(BaseModel):
    headers: Optional[Headers] = None
    format: Optional[str] = None


class Output(BaseModel):
    object_storage: Optional[ObjectStorage] = None
    client: Optional[Client] = None


class Configuration(BaseModel):
    id: Optional[str] = None
    name: Optional[str] = None
    client: str = None
    environment: Optional[Environment] = None
    source: Optional[Source] = None
    data: Optional[Data] = None
    output: Optional[Output] = None
