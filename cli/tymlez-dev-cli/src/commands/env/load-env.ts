import assert from 'assert';
import fs from 'fs';
import path from 'path';

import { getBuildTimeConfig } from '../deploy/frontend/getBuildTimeConfig';

const { writeFile } = fs.promises;

const handler = async (): Promise<void> => {
  assert(process.env.ENV, 'ENV is missing');

  const {
    ENV,
    GIT_SHA,
    PLATFORM_API_URL,
    CLIENT_API_URL,
    LOGIN_EMAIL,
    LOGIN_PASSWORD,
  } = await getBuildTimeConfig({
    env: process.env.ENV,
  });

  console.log(`--- Loading ENV for ${process.env.ENV}`);

  const envMap = {
    NEXT_PUBLIC_ENV: ENV,
    NEXT_PUBLIC_GIT_SHA: GIT_SHA,
    NEXT_PUBLIC_PLATFORM_API_URL: PLATFORM_API_URL,
    NEXT_PUBLIC_CLIENT_API_URL: CLIENT_API_URL,
    NEXT_PUBLIC_LOGIN_EMAIL: LOGIN_EMAIL,
    NEXT_PUBLIC_LOGIN_PASSWORD: LOGIN_PASSWORD,
  };
  const rootDir = process.env.INIT_CWD || '';
  const envFilePath = path.join(rootDir, '.env');
  console.log('Env file emit to %s', envFilePath);
  console.log('Env vars %s', envMap);
  await writeFile(
    envFilePath,
    [
      '# Auto generated by tymlez-cli env init, DO NOT modify manually.\n',
      ...Object.entries(envMap)
        .filter(([_key, value]) => !!value)
        .map(([key, value]) => `${key}='${value}'`),
    ].join('\n'),
  );
};

const command = 'init';
const builder = {};
const desc = 'Generate .env file';
export { handler, command, builder, desc };
